{
  "env": {
    "browser": true,
    "es2022": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:eslint-comments/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:unicorn/recommended",
    "plugin:editorconfig/all",
    "prettier"
  ],
  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly"
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 2022,
    "sourceType": "module",
    "project": "./tsconfig.json",
    "tsconfigRootDir": ".",
    "createDefaultProgram": true
  },
  "plugins": [
    "@rushstack/eslint-plugin",
    "@rushstack/eslint-plugin-security",
    "@typescript-eslint",
    "editorconfig",
    "eslint-plugin-tsdoc",
    "jsdoc",
    "promise",
    "unused-imports",
    "unicorn",
    "import"
  ],
  "reportUnusedDisableDirectives": true,
  "rules": {
    /* Core Rules */
    "no-empty": "error",
    "no-void": ["error", { "allowAsStatement": true }],
    "require-atomic-updates": "error",
    "eqeqeq": ["error", "smart"],
    "max-len": [
      "error",
      {
        "code": 120,
        "ignoreStrings": false,
        "ignoreRegExpLiterals": false,
        "ignoreTemplateLiterals": false
      }
    ],

    /* TypeScript Rules */
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": false,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": true,
        "allowDirectConstAssertionInArrowFunctions": true
      }
    ],
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "caughtErrorsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/consistent-type-assertions": [
      "error",
      {
        "assertionStyle": "as",
        "objectLiteralTypeAssertions": "never"
      }
    ],
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/unbound-method": [
      "error",
      {
        "ignoreStatic": true
      }
    ],

    /* Import Rules */
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": [
          "**/*.test.{ts,tsx}",
          "**/*.spec.{ts,tsx}",
          "src/test/**",
          "**/vite.config.ts"
        ]
      }
    ],
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "newlines-between": "always"
      }
    ],

    /* Unicorn Rules */
    "unicorn/prevent-abbreviations": "off",
    "unicorn/filename-case": [
      "error",
      {
        "cases": {
          "kebabCase": true,
          "pascalCase": true // Allow React components
        }
      }
    ],
    "unicorn/no-null": "off", // Useful for React refs

    /* Formatting Rules (matching Prettier) */
    "arrow-parens": ["error", "always"],
    "semi": "off",
    "@typescript-eslint/semi": ["error", "never"],
    "quotes": "off",
    "@typescript-eslint/quotes": [
      "error",
      "single",
      {
        "avoidEscape": true,
        "allowTemplateLiterals": true
      }
    ],

    /* Documentation */
    "tsdoc/syntax": "error",

    /* Security */
    "@rushstack/security/no-unsafe-regex": "error"
  },
  "overrides": [
    {
      "files": ["*.test.ts", "*.spec.ts", "**/test/**"],
      "rules": {
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-explicit-any": "off"
      }
    },
    {
      "files": ["*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ],
  "settings": {
    "import/resolver": {
      "typescript": {
        "project": "./tsconfig.json"
      },
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    },
    "import/extensions": [".js", ".jsx", ".ts", ".tsx"]
  }
}